//buildscript {
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
//    }
//}

plugins {
    id 'scala'
    id 'idea'
    id 'com.google.protobuf' version '0.8.17'
}

ext {
    scalapbVersion = '0.11.5'
    grpcVersion = '1.41.0'
}

repositories {
    mavenCentral()
    maven {
        url "https://repo1.maven.org/maven2/"
    }
}

dependencies {
    // Scala 2.13
    implementation 'org.scala-lang:scala-library:2.13.6'

    // gRPC
    compile group: 'io.grpc', name: 'grpc-netty', version: "${grpcVersion}"
    compile group: 'io.grpc', name: 'grpc-services', version: "${grpcVersion}"

    // ScalaPB
    compile "com.thesamet.scalapb:scalapb-runtime_2.13:${scalapbVersion}"
    compile "com.thesamet.scalapb:scalapb-runtime-grpc_2.13:${scalapbVersion}"

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.scalatest:scalatest_2.13:3.2.2'

    // Need scala-xml at test runtime
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.13:1.1.1'
}


protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.7.1'
    }
    plugins {
        scalapb {
            artifact = (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) ?
                    "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:windows@bat" :
                    "com.thesamet.scalapb:protoc-gen-scala:${scalapbVersion}:unix@sh"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                scalapb {
                    // add any ScalaPB generator options here. See: https://scalapb.github.io/scalapbc.html#passing-generator-parameters
                    option 'grpc'
                }
            }
        }
    }
}

task run(type: JavaExec, dependsOn: classes) {
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

// Add generated Scala code as a source directory
sourceSets {
    main {
        scala {
            srcDirs "${protobuf.generatedFilesBaseDir}/main/scalapb"
        }
    }
}
